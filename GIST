https://codeburst.io/sequelize-migrations-setting-up-associations-985d29b61ee7


api/test/*.test.js api/movil/test/*.test.js


    "test": "npm-run-all test:standard:api",
    "test:standard:api": "eslint server.js app_api/**",
    "test:standard:web": "",
    "test:unit:local": "yarn cross-env NODE_ENV=testing env-cmd .env nyc --reporter=html --reporter=text --report-dir=reports/nyc mocha --opts app_api/movil/test/mocha.opts app_api/movil/test/unit/*.test.js --exit",
    "test:unit:local:watch": "yarn cross-env NODE_ENV=testing env-cmd .env mocha --opts app_api/movil/test/mocha.travis.opts app_api/movil/test/*.unit.test.js  --watch --recursive",
    "test:unit:travis": "yarn cross-env NODE_ENV=testing env-cmd .env mocha --opts app_api/movil/test/mocha.travis.opts app_api/movil/test/*.test.js --exit",
    "test:integration:local": "yarn cross-env NODE_ENV=testing env-cmd .env nyc --reporter=html --reporter=text --report-dir=reports/nyc mocha --opts app_api/movil/test/mocha.opts app_api/movil/test/*.test.js --exit",
    "test:integration:local:watch": "yarn cross-env NODE_ENV=testing env-cmd .env mocha --opts app_api/movil/test/mocha.travis.opts app_api/movil/test/*.integration.test.js  --watch --recursive",
    "test:integration:travis": "yarn cross-env NODE_ENV=testing env-cmd .env mocha --opts app_api/movil/test/mocha.travis.opts app_api/movil/test/*.test.js --exit",
    "test:coverage:coveralls": "nyc report --reporter=text-lcov | coveralls",
    "test:coverage:codecov": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
        "prueba": "cross-env NODE_ENV=development env-cmd .env nodemon prueba.js",
    "db:create": "cross-env NODE_ENV=development env-cmd .env node app_api/config/database/scripts/create_database.js",
    "predb:create:mongo": "cross-env NODE_ENV=development env-cmd .env node app_api/config/mongodb/scripts/deletedb.js",
    "db:create:mongo": "cross-env NODE_ENV=development env-cmd .env node app_api/config/mongodb/scripts/index.js",
    "db:mongo:test": "",

        "nodemon": "nodemon",
    "eslint": "eslint"



     "start": "yarn eslint server.js app_api/**",
    "restart": "yarn eslint server.js app_api/**"

    
    [Sprint 2] "Como usuario de la aplicación móvil quiero poder revisar los detalles de un accidente" Tarea #61

    [Sprint 2] "Como usuario de la aplicación móvil quiero revisar la lista de capacitaciones" Tarea #62

    [Sprint 2] "Como usuario de la aplicación móvil quiero revisar los detalles de una capacitación específica" Tarea #63

    [Sprint 2] "Como usuario de la aplicación móvil quiero poder revisar los equipos existentes" Tarea #64

    [Sprint 2] "Como usuario de la aplicación móvil quiero poder revisar la lista de accidentes en el área" Tarea #65

    [Sprint 2] "Como usuario de la aplicación móvil quiero poder escanear el código QR de un área de trabajo" Tarea #46, #49, #47, #48



    
// const passport = require('passport')
// var JwtStrategy = require('passport-jwt').Strategy,
//     ExtractJwt = require('passport-jwt').ExtractJwt;
// var opts = {}
// opts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();
// opts.secretOrKey = 'secret';
// opts.issuer = 'accounts.examplesoft.com';
// opts.audience = 'yoursite.net';
// const err = () => {
//   return new Promise((resolve, reject) => {
//     passport.use(new JwtStrategy(opts, function(jwt_payload, done) {
//       resolve('aa')
//       return done(null, user)
//     }));
//   })
// }

// err().then((aa) => {
//   console.log(aa)
// }).catch(err => { console.log(err) })
// err



// let knex = require('knex')
var knex = require('knex')({
  client: 'sqlite',
  useNullAsDefault: true
  // rowMode: true,
  // wrapIdentifier: (value, origImpl, queryContext) => origImpl(convertToSnakeCase(value))
})
// let x = knex({ a: 'table', b: 'table' })
//   .select({
//     aTitle: 'a.title',
//     bTitle: 'b.title'
//   })
//   .whereRaw('?? = ??', ['a.column_1', 'b.column_2']).toSQL()
// console.log(x['sql'])
    let id = 1
    let x = knex('establecimientos')
            .whereRaw(`establecimientos.empresasId = '${id}'`)
            .toSQL()
    // const sql = x['sql']
    // // .toString() .toNative()
    // return new Promise((resolve, reject) => {
    //   sequelize.query(sql, { type: sequelize.QueryTypes.SELECT})
    //     .then((resp) => {
    //       resolve(resp)
    //     }).catch((err) => {
    //       return reject(err)
    //     })
    // })
    const sql = x['sql']
    console.log(sql)
// select p.nombres, p.apellidos, p.id, p.cedula, p.correo, p.usuario, e.rol from personas as p join `personasEstablecimientos` as e where e.`establecimientosId` = 1 and e.`personasId` = p.id

  // select p.nombres, p.apellidos, p.id, p.cedula, p.correo, p.usuario, e.rol from personas as p join `personasEstablecimientos` as e where e.`establecimientosId` = 1 and e.`personasId` = p.id
  // let x = knex('establecimientos')
  //           .whereRaw(`establecimientos.empresasId = '${id}'`)
  //           .toSQL()
  define.ObtenerPorEstablecimiento = function ({ establecimientosId }) {
    return new Promise((resolve, reject) => {
      this.findById(id)
        .then((project) => {
          resolve(project)
        }).catch((err) => {
          return reject(err)
        })
    })
  }
